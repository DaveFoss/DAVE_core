# define stages
stages:
    - test
    - docker
    #- lint  # create stage to check codestyle with pylint? also run black and isort overall
    - deploy
    
# define task which should execute before each jobs
before_script:
    # add something

# testing changes 
test:
  stage: test
  image: 
    name: registry.gitlab.cc-asp.fraunhofer.de/dave/dave
    entrypoint: [""]
  tags:
    - asprunner
  script:
    - pytest dave/tests --disable-warnings --cov-config=.coveragerc --cov=dave  #--cov-report=html
  # artifacts:
  #   paths:
  #     - coverage
  #  expire_in: 30 days
  rules:
    # no schedule piplines
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # master branch
    - if: $CI_COMMIT_BRANCH == "master"
    # develop branch
    - if: $CI_COMMIT_BRANCH == "develop"
    


    

# build release docker image from master branch (incl. push to gwdg server)
build_release_container:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
  - asprunner
  script:
    # create docker image for DaVe
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context dir:///$CI_PROJECT_DIR/ --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY/dave/dave:latest --insecure --skip-tls-verify --insecure-pull --cleanup
  rules:
    # no schedule piplines
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # master branch
    - if: $CI_COMMIT_BRANCH == "master"
    

    

# build develop docker image from develop branch (push to git zv container registry)
build_develop_container:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - asprunner
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context dir:///$CI_PROJECT_DIR/ --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY/dave/dave:latest --insecure --skip-tls-verify --insecure-pull --cleanup
  rules:
    # develop branch 
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual

# deploy new docker image release to server and reastart system
# Furthermore restart system if there are any changes on the system relevant files (e.g. docker-compose)
deploy_relese container:
  stage: deploy
  image:
    name: ubuntu:latest
  tags:
  - asprunner
  script:
    # install ansible
    - apt update
    - apt -y install ansible
    # --- setup ssh
    # run ssh agent
    - eval $(ssh-agent -s)
    # create the ssh directory and give it the right permissions
    - mkdir -p ~/.ssh/
    - chmod 700 ~/.ssh
    # create ssh key file and add gitlab ci deploy key
    - echo "$SSH_DEPLOY_KEY" | tr -d '\r' >~/.ssh/deploy-key
    - chmod 400 ~/.ssh/deploy-key
    # disable host key checking
    - export ANSIBLE_HOST_KEY_CHECKING=False
    # changed folder permission because ansible.cfg can't be in world-writable directory
    - chmod 700 deployment
    - cd deployment
    # intsall ansible galaxy
    - ansible-galaxy install -r ./requirements.yml
    # run ansible playbook
    - ansible-playbook deployment.yml -u cloud --private-key=~/.ssh/deploy-key -i inventory -e "CI_REGISTRY=${CI_REGISTRY} CI_REGISTRY_USER=${CI_REGISTRY_USER} CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}"
    #- ansible-playbook deployment.yml --private-key ~/.ssh/deploy-key -u cloud --vault-password-file $ANSIBLE_VAULT_PFILE -i inventory
  rules:
    # no schedule piplines
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # master branch 
    - if: $CI_COMMIT_BRANCH == "master" 
    
    
    
# create a dump of all DaVe dabases within the mongo db
dump_database:
  stage: deploy
  image:
    name: ubuntu:latest
  tags:
  - asprunner
  script:
    # install ansible
    - apt update
    - apt -y install ansible
    # --- setup ssh
    # run ssh agent
    - eval $(ssh-agent -s)
    # create the ssh directory and give it the right permissions
    - mkdir -p ~/.ssh/
    - chmod 700 ~/.ssh
    # create ssh key file and add gitlab ci deploy key
    - echo "$SSH_DEPLOY_KEY" | tr -d '\r' >~/.ssh/deploy-key
    - chmod 400 ~/.ssh/deploy-key
    # disable host key checking
    - export ANSIBLE_HOST_KEY_CHECKING=False
    # changed folder permission because ansible.cfg can't be in world-writable directory
    - chmod 700 deployment
    - cd deployment
    # intsall ansible galaxy
    - ansible-galaxy install -r ./requirements.yml
    # run ansible playbook
    - ansible-playbook database_dump.yml -u cloud --private-key=~/.ssh/deploy-key -i inventory -e "DB_USER=root DB_PW=example"
  rules:
    # scheduled pipline database dump. starts every week on sunday  6 o'clock on the master branch
    - if: '$CI_PIPLINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master"'
    #- if: $SCHEDULE_TYPE == "db_dump"
    # master branch 
